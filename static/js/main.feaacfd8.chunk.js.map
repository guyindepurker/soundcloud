{"version":3,"sources":["cmps/SearchInput/SearchInput.jsx","cmps/SearchButtons/SearchButtons.jsx","services/StorageService.js","services/SoundCloudService.js","cmps/SearchResultPreview/SearchResultPreview.jsx","cmps/SearchResultList/SearchResultList.jsx","cmps/SearchContainer/SearchContainer.jsx","cmps/PlayerContainer/PlayerContainer.jsx","cmps/RecentSearchPreview/RecentSearchPreview.jsx","cmps/RecentSearchList/RecentSearchList.jsx","cmps/RecentSearches/RecentSearches.jsx","pages/SoundCloudApp/SoundCloudApp.jsx","assets/logo.svg","cmps/Header/Header.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["SearchInput","searchTracks","isLoading","useState","searchTrack","setSearchTrack","onSearchTracks","ev","preventDefault","className","onSubmit","value","onChange","target","placeholder","label","loading","onClick","SearchButtons","toggleSearchView","nextPageResults","data-pr-position","storageService","save","key","val","localStorage","setItem","JSON","stringify","load","getItem","parse","remove","removeItem","USER_SEARCH_VIEW","USER_SEARCHES","BASE_URL","soundCloudService","getSearchResults","getNextPageResults","getSearchView","getRecentSearch","saveSearchView","searchViewValue","saveRecentSearch","recentSearch","recentSearches","unshift","length","splice","query","a","axios","get","res","searchResults","data","nextPageUrl","SearchResultPreview","searchResult","defaultImgUrl","setSelectedTrack","imgUrl","artwork_url","title","src","alt","SearchResultList","searchView","isLoadingList","find","map","id","SearchContainer","setRecentSearch","recentSearchQuery","setSearchResults","setNextPageUrl","setSearchView","setIsLoading","setIsLoadingList","fetchData","updateSearchResults","console","error","useEffect","collection","next_href","nextSearchResults","searchViewType","PlayerContainer","selectedTrack","width","height","url","uri","RecentSearchPreview","onSetSearch","RecentSearchList","RecentSearches","SoundCloudApp","setRecentSearches","setRecentSearchQuery","Header","logo","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"uSA2BeA,EArBK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACjC,EAAsCC,mBAAS,IAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACMC,EAAiB,SAACC,GACpBA,EAAGC,iBACiB,KAAhBJ,GACJH,EAAaG,IAGjB,OACI,uBAAMK,UAAU,kCAAkCC,SAAUJ,EAA5D,UACI,uBAAMG,UAAU,oBAAhB,UACI,mBAAGA,UAAU,iBACb,cAAC,YAAD,CAAYE,MAAOP,EAAaQ,SAAU,gBAAGC,EAAH,EAAGA,OAAH,OAAgBR,EAAeQ,EAAOF,QAAQG,YAAY,qBAExG,cAAC,SAAD,CAAQC,MAAM,SAASC,QAASd,EAAWe,QAASX,Q,gBCCjDY,G,MAfO,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,iBAAkBC,EAAsB,EAAtBA,gBAEvC,OACI,0BAASX,UAAU,oCAAnB,UACI,cAAC,IAAD,CAAuBY,mBAAiB,MAAMZ,UAAU,YAAYQ,QAASG,IAC7E,sBAAKX,UAAU,eAAf,UACI,cAAC,IAAD,CAAYA,UAAU,YAAYQ,QAAS,kBAAME,EAAiB,WAClE,cAAC,IAAD,CAAQF,QAAS,kBAAME,EAAiB,mB,iBCb3CG,EAAiB,CAC5BC,KAIF,SAAcC,EAAKC,GACjBC,aAAaC,QAAQH,EAAKI,KAAKC,UAAUJ,KAJzCK,KAOF,SAAcN,GACZ,IAAMC,EAAMC,aAAaK,QAAQP,GACjC,OAAOI,KAAKI,MAAMP,IARlBQ,OAWF,SAAgBT,GACdE,aAAaQ,WAAWV,KCb1B,IAAMW,EAAmB,cACnBC,EAAgB,aAEhBC,EAAQ,4EADI,wBACJ,YACDC,EAAoB,CAC/BC,iB,4CACAC,mB,4CACAC,cA6CF,WAEE,OADmBnB,EAAeQ,KAAKK,IAAqB,QA7C5DO,kBACAC,eAkCF,SAAwBC,GACtBtB,EAAeC,KAAKY,EAAkBS,IAlCtCC,iBAuBF,SAA0BC,GACxB,IAAMC,EAAiBL,IACvBK,EAAeC,QAAQF,GACnBC,EAAeE,OAAS,GAC1BF,EAAeG,OAAO,GAGxB,OADA5B,EAAeC,KAAKa,EAAeW,GAC5BA,I,4CA3BT,WAAgCI,GAAhC,iBAAAC,EAAA,+EAEsBC,IAAMC,IAAN,UAAajB,EAAb,cAA2Bc,IAFjD,cAEUI,EAFV,OAGUC,EAAgBD,EAAIE,KAH9B,kBAIWD,GAJX,qG,kEAUA,WAAkCE,GAAlC,iBAAAN,EAAA,+EAEsBC,IAAMC,IAAII,GAFhC,cAEUH,EAFV,OAGUnC,EAAkBmC,EAAIE,KAHhC,kBAIWrC,GAJX,qG,sBAwBA,SAASsB,IAEP,OADqBpB,EAAeQ,KAAKM,IAAkB,G,YCjC9CuB,G,YAZa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,aAAcC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,iBACnCC,EAAkBH,EAA/BI,YAAqBC,EAAUL,EAAVK,MAC7B,OACI,qBAAIhD,QAAS,kBAAM6C,EAAiBF,IAAenD,UAAU,2CAA7D,UACI,qBAAKA,UAAU,4BAA4ByD,IAAKH,GAAUF,EAAeM,IAAI,cAC7E,oBAAI1D,UAAU,8BAAd,SAA6CwD,SCW1CG,EAdU,SAAC,GAAoE,IAAlEZ,EAAiE,EAAjEA,cAAea,EAAkD,EAAlDA,WAAYC,EAAsC,EAAtCA,cAAeR,EAAuB,EAAvBA,iBAE7CD,EAAkBL,EAAce,MAAK,SAAAX,GAAY,OAAiC,OAA7BA,EAAaI,eAA/EA,YAER,OAAIM,EAAsB,qBAAK7D,UAAU,qBAAf,SAAoC,cAAC,kBAAD,MAE1D,oBAAIA,UAAS,wCAAkD,SAAf4D,EAAwB,OAAS,IAAjF,SACKb,EAAcgB,KAAI,SAAAZ,GAAY,OAAI,cAAC,EAAD,CAAqBE,iBAAkBA,EAAkBD,cAAeA,EAAeQ,WAAYA,EAAkCT,aAAcA,GAA/BA,EAAaa,UC0DjKC,EA/DS,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,gBAAiBC,EAA0C,EAA1CA,kBAAmBd,EAAuB,EAAvBA,iBAC3D,EAA0C3D,mBAAS,IAAnD,mBAAOqD,EAAP,KAAsBqB,EAAtB,KACA,EAAsC1E,mBAAS,MAA/C,mBAAOuD,EAAP,KAAoBoB,EAApB,KACA,EAAoC3E,mBAASmC,EAAkBG,iBAA/D,mBAAO4B,EAAP,KAAmBU,EAAnB,KACA,EAAkC5E,oBAAS,GAA3C,mBAAOD,EAAP,KAAkB8E,EAAlB,KACA,EAA0C7E,oBAAS,GAAnD,mBAAOmE,EAAP,KAAsBW,EAAtB,KAEMC,EAAS,uCAAG,WAAO/B,GAAP,eAAAC,EAAA,sEAEV6B,GAAiB,GAFP,SAGkB3C,EAAkBC,iBAAiBY,GAHrD,OAGJK,EAHI,OAIV2B,EAAoB3B,GACpByB,GAAiB,GALP,gDAOVG,QAAQC,MAAM,SAAd,MAPU,yDAAH,sDAWfC,qBAAU,WACFV,GACAM,EAAUN,KAGf,CAACA,IACJ,IAKMO,EAAsB,SAAC3B,GACzBqB,EAAgB,OAACrB,QAAD,IAACA,OAAD,EAACA,EAAe+B,YAChCT,EAAc,OAACtB,QAAD,IAACA,OAAD,EAACA,EAAegC,YAG5BvF,EAAY,uCAAG,WAAOkD,GAAP,SAAAC,EAAA,6DACjB4B,GAAa,GACbL,EAAgBxB,GAFC,SAGX+B,EAAU/B,GAHC,OAIjB6B,GAAa,GAJI,2CAAH,sDAMZ5D,EAAe,uCAAG,4BAAAgC,EAAA,yDACfM,EADe,iEAGhBuB,GAAiB,GAHD,SAIgB3C,EAAkBE,mBAAmBkB,GAJrD,OAIV+B,EAJU,OAKhBR,GAAiB,GACjBE,EAAoBM,GANJ,kDAQhBL,QAAQC,MAAM,SAAd,MARgB,0DAAH,qDAYrB,OACI,0BAAS5E,UAAU,mBAAnB,UACI,cAAC,EAAD,CAAaP,UAAWA,EAAWD,aAAcA,IACjDuD,EAAcP,OAAO,GAAK,cAAC,EAAD,CAAkBa,iBAAkBA,EAAkBO,WAAYA,EAAYC,cAAeA,EAAed,cAAeA,IACrJ,cAAC,EAAD,CAAerC,iBAhCE,SAACuE,GACtBX,EAAcW,GACdpD,EAAkBK,eAAe+C,IA8BsBtE,gBAAiBA,Q,iBC/CjEuE,G,MAZS,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEvB,OAAKA,EAED,yBAASnF,UAAU,sCAAnB,SACI,cAAC,IAAD,CAAaoF,MAAM,QAAQC,OAAO,QAAQC,IAAKH,EAAcI,QAH1C,OCQhBC,G,mBAXa,SAAC,GAAmC,IAAjCnD,EAAgC,EAAhCA,aAAcoD,EAAkB,EAAlBA,YAEzC,OACI,oBAAIjF,QAAS,kBAAMiF,EAAYpD,IAAerC,UAAU,wBAAxD,SACKqC,MCQEqD,EAXU,SAAC,GAAqC,IAAnCpD,EAAkC,EAAlCA,eAAgBmD,EAAkB,EAAlBA,YAExC,OACI,oBAAIzF,UAAU,gCAAd,SACKsC,EAAeyB,KAAI,SAAC1B,EAActB,GAAf,OAAuB,cAAC,EAAD,CAAqB0E,YAAaA,EAAapD,aAAcA,GAAmBtB,SCOxH4E,EAXQ,SAAC,GAAqC,IAAnCrD,EAAkC,EAAlCA,eAAgBmD,EAAkB,EAAlBA,YACtC,OACI,0BAASzF,UAAU,4CAAnB,UACI,oBAAIA,UAAU,sBAAd,gCACEsC,EAAeE,OAA0C,cAAC,EAAD,CAAkBiD,YAAaA,EAAanD,eAAgBA,IAA7F,0DCavBsD,EAlBO,WAClB,MAA4ClG,mBAASmC,EAAkBI,mBAAvE,mBAAOK,EAAP,KAAuBuD,EAAvB,KACA,EAAkDnG,mBAAS,MAA3D,mBAAOyE,EAAP,KAA0B2B,EAA1B,KACA,EAA0CpG,mBAAS,MAAnD,mBAAOyF,EAAP,KAAsB9B,EAAtB,KAOA,OACI,qCACI,cAAC,EAAD,CAAiBA,iBAAkBA,EAAkBc,kBAAmBA,EAAmBD,gBAPzE,SAACxB,GACvB,IAAMJ,EAAiBT,EAAkBO,iBAAiBM,GAC1DmD,EAAkBvD,MAMd,cAAC,EAAD,CAAiB6C,cAAeA,IAChC,cAAC,EAAD,CAAgBM,YAAaK,EAAsBxD,eAAgBA,QCnBhE,MAA0B,iCCmB1ByD,G,OAfA,WACX,OACI,wBAAQ/F,UAAU,SAAlB,SACI,qBAAKA,UAAU,mBAAf,SACI,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,WAAWyD,IAAKuC,EAAMtC,IAAI,SACzC,uDCOLuC,MAXf,WACE,OACE,sBAAKjG,UAAU,MAAf,UACE,cAAC,EAAD,IACA,sBAAMA,UAAU,cAAhB,SACA,cAAC,EAAD,UCCckG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBb,MAAK,SAACc,GACLA,EAAaC,gBAEdC,OAAM,SAAC9C,GACND,QAAQC,MAAMA,EAAM+C,YE5G5BpB,K","file":"static/js/main.feaacfd8.chunk.js","sourcesContent":["\nimport React, { useState} from 'react'\nimport { InputText } from 'primereact/inputtext';\nimport { Button } from 'primereact/button';\nimport './SearchInput.scss'\n\nconst SearchInput = ({ searchTracks, isLoading }) => {\n    const [searchTrack, setSearchTrack] = useState('')\n    const onSearchTracks = (ev) => {\n        ev.preventDefault()\n        if (searchTrack === '') return;\n        searchTracks(searchTrack)\n    }\n\n    return (\n        <form className=\"search-input flex center-center\" onSubmit={onSearchTracks}>\n            <span className=\"p-input-icon-left\">\n                <i className=\"pi pi-search\" />\n                <InputText  value={searchTrack} onChange={({ target }) => setSearchTrack(target.value)} placeholder=\"Search Tracks\" />\n            </span>\n            <Button label=\"Submit\" loading={isLoading} onClick={onSearchTracks} />\n        </form>\n    )\n\n\n}\n\nexport default SearchInput\n","\nimport React from 'react'\nimport { BsList, BsGridFill } from 'react-icons/bs';\nimport { FaArrowAltCircleRight } from 'react-icons/fa';\nimport './SearchButtons.scss'\n\nconst SearchButtons = ({ toggleSearchView, nextPageResults }) => {\n\n    return (\n        <section className=\"search-buttons flex space-between\">\n            <FaArrowAltCircleRight data-pr-position=\"top\" className=\"next-page\" onClick={nextPageResults} />\n            <div className=\"display-btns\">\n                <BsGridFill className=\"grid-view\" onClick={() => toggleSearchView('tile')} />\n                <BsList onClick={() => toggleSearchView('list')} />\n            </div>\n        </section>\n    )\n\n\n}\n\nexport default SearchButtons\n","export const storageService = {\r\n  save,\r\n  load,\r\n  remove,\r\n};\r\nfunction save(key, val) {\r\n  localStorage.setItem(key, JSON.stringify(val));\r\n}\r\n\r\nfunction load(key) {\r\n  const val = localStorage.getItem(key);\r\n  return JSON.parse(val);\r\n}\r\n\r\nfunction remove(key) {\r\n  localStorage.removeItem(key);\r\n}\r\n","import axios from 'axios';\nimport { storageService } from './StorageService';\nconst USER_SEARCH_VIEW = 'search_view';\nconst USER_SEARCHES = 'history_DB';\nconst CLIENT_ID = 'ggX0UomnLs0VmW7qZnCzw';\nconst BASE_URL = `https://api.soundcloud.com/tracks?linked_partitioning=1&client_id=${CLIENT_ID}&limit=6`;\nexport const soundCloudService = {\n  getSearchResults,\n  getNextPageResults,\n  getSearchView,\n  getRecentSearch,\n  saveSearchView,\n  saveRecentSearch,\n};\n\nasync function getSearchResults(query) {\n  try {\n    const res = await axios.get(`${BASE_URL}&q=${query}`);\n    const searchResults = res.data;\n    return searchResults;\n  } catch (err) {\n    throw err;\n  }\n}\n\nasync function getNextPageResults(nextPageUrl) {\n  try {\n    const res = await axios.get(nextPageUrl);\n    const nextPageResults = res.data;\n    return nextPageResults;\n  } catch (err) {\n    throw err;\n  }\n}\n\nfunction saveRecentSearch(recentSearch) {\n  const recentSearches = getRecentSearch();\n  recentSearches.unshift(recentSearch);\n  if (recentSearches.length > 5) {\n    recentSearches.splice(5);\n  }\n  storageService.save(USER_SEARCHES, recentSearches);\n  return recentSearches;\n}\n\nfunction saveSearchView(searchViewValue) {\n  storageService.save(USER_SEARCH_VIEW, searchViewValue);\n}\n\nfunction getRecentSearch() {\n  const recentSearch = storageService.load(USER_SEARCHES) || [];\n  return recentSearch;\n}\n\nfunction getSearchView() {\n  const searchView = storageService.load(USER_SEARCH_VIEW) || 'list';\n  return searchView;\n}\n","\nimport React from 'react'\n\nimport './SearchResultPreview.scss'\n\nconst SearchResultPreview = ({ searchResult, defaultImgUrl, setSelectedTrack }) => {\n    const { artwork_url: imgUrl, title } = searchResult\n    return (\n        <li onClick={() => setSelectedTrack(searchResult)} className=\"search-result-preview flex  align-center\">\n            <img className=\"search-result-preview-img\" src={imgUrl || defaultImgUrl} alt=\"img cover\" />\n            <h2 className=\"search-result-preview-title\">{title}</h2>\n        </li>\n    )\n\n\n}\n\nexport default SearchResultPreview\n","\nimport React from 'react'\nimport { ProgressSpinner } from 'primereact/progressspinner';\n\nimport './SearchResultList.scss'\nimport SearchResultPreview from '../SearchResultPreview/SearchResultPreview';\n\nconst SearchResultList = ({ searchResults, searchView, isLoadingList, setSelectedTrack }) => {\n\n    const { artwork_url: defaultImgUrl } = searchResults.find(searchResult => searchResult.artwork_url !== null)\n\n    if (isLoadingList) return <div className=\"flex center-center\"><ProgressSpinner /></div>\n    return (\n        <ul className={`search-result-list clean-list ${searchView === 'tile' ? 'grid' : ''}`}>\n            {searchResults.map(searchResult => <SearchResultPreview setSelectedTrack={setSelectedTrack} defaultImgUrl={defaultImgUrl} searchView={searchView} key={searchResult.id} searchResult={searchResult} />)}\n        </ul>\n    )\n\n\n}\n\nexport default SearchResultList\n","\nimport React, { useState, useEffect } from 'react'\n\nimport './SearchContainer.scss'\nimport SearchInput from '../SearchInput/SearchInput';\nimport SearchButtons from '../SearchButtons/SearchButtons';\nimport { soundCloudService } from '../../services/SoundCloudService';\nimport SearchResultList from '../SearchResultList/SearchResultList';\n\nconst SearchContainer = ({ setRecentSearch, recentSearchQuery, setSelectedTrack }) => {\n    const [searchResults, setSearchResults] = useState([])\n    const [nextPageUrl, setNextPageUrl] = useState(null)\n    const [searchView, setSearchView] = useState(soundCloudService.getSearchView())\n    const [isLoading, setIsLoading] = useState(false)\n    const [isLoadingList, setIsLoadingList] = useState(false)\n\n    const fetchData = async (query) => {\n        try {\n            setIsLoadingList(true)\n            const searchResults = await soundCloudService.getSearchResults(query)\n            updateSearchResults(searchResults)\n            setIsLoadingList(false)\n        } catch (err) {\n            console.error('ERROR!', err)\n        }\n\n    }\n    useEffect(() => {\n        if (recentSearchQuery) {\n            fetchData(recentSearchQuery)\n        }\n\n    }, [recentSearchQuery])\n    const toggleSearchView = (searchViewType) => {\n        setSearchView(searchViewType)\n        soundCloudService.saveSearchView(searchViewType)\n    }\n\n    const updateSearchResults = (searchResults) => {\n        setSearchResults(searchResults?.collection)\n        setNextPageUrl(searchResults?.next_href)\n    }\n\n    const searchTracks = async (query) => {\n        setIsLoading(true)\n        setRecentSearch(query)\n        await fetchData(query)\n        setIsLoading(false)\n    }\n    const nextPageResults = async () => {\n        if (!nextPageUrl) return;\n        try {\n            setIsLoadingList(true)\n            const nextSearchResults = await soundCloudService.getNextPageResults(nextPageUrl)\n            setIsLoadingList(false)\n            updateSearchResults(nextSearchResults)\n        } catch (err) {\n            console.error('ERROR!', err)\n        }\n\n    }\n    return (\n        <section className=\"search-container\">\n            <SearchInput isLoading={isLoading} searchTracks={searchTracks} />\n           {searchResults.length>0 && <SearchResultList setSelectedTrack={setSelectedTrack} searchView={searchView} isLoadingList={isLoadingList} searchResults={searchResults} />} \n            <SearchButtons toggleSearchView={toggleSearchView} nextPageResults={nextPageResults} />\n        </section>\n    )\n\n\n}\n\nexport default SearchContainer\n","\nimport React from 'react'\nimport ReactPlayer from 'react-player'\n\nimport './PlayerContainer.scss'\n\nconst PlayerContainer = ({ selectedTrack }) => {\n\n    if (!selectedTrack) return null\n    return (\n        <section className=\"player-container flex center-center\">\n            <ReactPlayer width='400px' height='200px' url={selectedTrack.uri} />\n        </section>\n    )\n\n\n}\n\nexport default PlayerContainer\n","\nimport React from 'react'\n\nimport './RecentSearchPreview.scss'\n\nconst RecentSearchPreview = ({ recentSearch, onSetSearch }) => {\n\n    return (\n        <li onClick={() => onSetSearch(recentSearch)} className=\"recent-search-preview\">\n            {recentSearch}\n        </li>\n    )\n\n\n}\n\nexport default RecentSearchPreview\n","\nimport React from 'react'\n\nimport './RecentSearchList.scss'\nimport RecentSearchPreview from '../RecentSearchPreview/RecentSearchPreview';\n\nconst RecentSearchList = ({ recentSearches, onSetSearch }) => {\n\n    return (\n        <ul className=\"recent-search-list clean-list\">\n            {recentSearches.map((recentSearch, key) => <RecentSearchPreview onSetSearch={onSetSearch} recentSearch={recentSearch} key={key} />)}\n        </ul>\n    )\n\n\n}\n\nexport default RecentSearchList\n","\nimport React from 'react'\n\nimport './RecentSearches.scss'\nimport RecentSearchList from '../RecentSearchList/RecentSearchList';\n\nconst RecentSearches = ({ recentSearches, onSetSearch }) => {\n    return (\n        <section className=\"recent-searches flex center-center column\">\n            <h2 className=\"recent-search-title\">Your recent search</h2>\n            {!recentSearches.length ? <span>No searches yet...</span> :<RecentSearchList onSetSearch={onSetSearch} recentSearches={recentSearches} />}\n        </section>\n    )\n\n\n}\n\nexport default RecentSearches\n","import React, { useState } from 'react';\nimport SearchContainer from 'cmps/SearchContainer/SearchContainer';\nimport PlayerContainer from 'cmps/PlayerContainer/PlayerContainer';\nimport RecentSearches from 'cmps/RecentSearches/RecentSearches';\nimport { soundCloudService } from 'services/SoundCloudService';\nconst SoundCloudApp = () => {\n    const [recentSearches, setRecentSearches] = useState(soundCloudService.getRecentSearch())\n    const [recentSearchQuery, setRecentSearchQuery] = useState(null)\n    const [selectedTrack, setSelectedTrack] = useState(null)\n\n    const onSetRecentSearch = (query) => {\n        const recentSearches = soundCloudService.saveRecentSearch(query)\n        setRecentSearches(recentSearches)\n    }\n    \n    return (\n        <>\n            <SearchContainer setSelectedTrack={setSelectedTrack} recentSearchQuery={recentSearchQuery} setRecentSearch={onSetRecentSearch} />\n            <PlayerContainer selectedTrack={selectedTrack} />\n            <RecentSearches onSetSearch={setRecentSearchQuery} recentSearches={recentSearches} />\n        </>\n    )\n}\nexport default SoundCloudApp","export default __webpack_public_path__ + \"static/media/logo.d7f3b5e6.svg\";","\nimport React from 'react'\nimport logo from 'assets/logo.svg'\nimport './Header.scss'\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <div className=\"header-container\">\n                <div className=\"logo flex\">\n                    <img className=\"logo-img\" src={logo} alt=\"logo\" />\n                    <span>SoundCloud</span>\n                    </div>\n            </div>\n        </header>\n    )\n\n\n}\n\nexport default Header\n","import React from 'react';\nimport SoundCloudApp from './pages/SoundCloudApp/SoundCloudApp';\nimport Header from './cmps/Header/Header';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <main className=\"flex column\">\n      <SoundCloudApp />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'primereact/resources/themes/saga-blue/theme.css'\nimport 'primereact/resources/primereact.min.css'\nimport 'primeicons/primeicons.css'\nimport './styles/_style.scss';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}